{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\"; // used for making the prop types of this component\n\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\"; // core components\n\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport styles from \"styles/jss/nextjs-material-kit-pro/components/customFileInputStyle.js\";\nconst useStyles = makeStyles(styles);\nexport default function CustomFileInput(props) {\n  const [fileNames, setFileNames] = React.useState(\"\"); // eslint-disable-next-line\n\n  const [files, setFiles] = React.useState(null);\n  let hiddenFile = /*#__PURE__*/React.createRef();\n\n  const onFocus = e => {\n    hiddenFile.current.click(e);\n  }; // eslint-disable-next-line\n\n\n  const handleSubmit = e => {\n    e.preventDefault(); // files is the file/image uploaded\n    // in this function you can save the image (files) on form submit\n    // you have to call it yourself\n  };\n\n  const addFile = e => {\n    let fileNames = \"\";\n    let files = e.target.files;\n\n    for (let i = 0; i < e.target.files.length; i++) {\n      fileNames = fileNames + e.target.files[i].name;\n\n      if (props.multiple && i !== e.target.files.length - 1) {\n        fileNames = fileNames + \", \";\n      }\n    }\n\n    setFiles(files);\n    setFileNames(fileNames);\n  };\n\n  const {\n    id,\n    endButton,\n    startButton,\n    inputProps,\n    formControlProps,\n    multiple\n  } = props;\n  const classes = useStyles();\n\n  if (inputProps && inputProps.type && inputProps.type === \"file\") {\n    inputProps.type = \"text\";\n  }\n\n  let buttonStart;\n  let buttonEnd;\n\n  if (startButton) {\n    buttonStart = /*#__PURE__*/_jsxs(Button, _objectSpread(_objectSpread({}, startButton.buttonProps), {}, {\n      children: [startButton.icon !== undefined ? startButton.icon : null, startButton.text !== undefined ? startButton.text : null]\n    }));\n  }\n\n  if (endButton) {\n    buttonEnd = /*#__PURE__*/_jsxs(Button, _objectSpread(_objectSpread({}, endButton.buttonProps), {}, {\n      children: [endButton.icon !== undefined ? endButton.icon : null, endButton.text !== undefined ? endButton.text : null]\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classes.inputFileWrapper,\n    children: [/*#__PURE__*/_jsx(\"input\", {\n      type: \"file\",\n      className: classes.inputFile,\n      multiple: multiple,\n      ref: hiddenFile,\n      onChange: addFile\n    }), /*#__PURE__*/_jsx(CustomInput, {\n      id: id,\n      formControlProps: _objectSpread({}, formControlProps),\n      inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {\n        onClick: onFocus,\n        value: fileNames,\n        endAdornment: buttonEnd,\n        startAdornment: buttonStart\n      })\n    })]\n  });\n}\nCustomFileInput.defaultProps = {\n  multiple: false\n};","map":null,"metadata":{},"sourceType":"module"}