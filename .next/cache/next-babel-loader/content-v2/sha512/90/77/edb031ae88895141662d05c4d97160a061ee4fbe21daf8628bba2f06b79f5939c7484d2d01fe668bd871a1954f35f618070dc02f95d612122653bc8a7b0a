{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/Users/jimhartford/Code/jibrilhartford-github/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\"; // nodejs library to set properties for components\n\nimport PropTypes from \"prop-types\"; // @material-ui/core components\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Snack from \"@material-ui/core/SnackbarContent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Icon from \"@material-ui/core/Icon\"; // @material-ui/icons\n\nimport Close from \"@material-ui/icons/Close\"; // core components\n\nimport styles from \"styles/jss/nextjs-material-kit-pro/components/snackbarContentStyle.js\";\nvar useStyles = makeStyles(styles);\nexport default function SnackbarContent(props) {\n  var message = props.message,\n      color = props.color,\n      close = props.close,\n      icon = props.icon;\n  var classes = useStyles();\n  var action = [];\n\n  var closeAlert = function closeAlert() {\n    setAlert(null);\n  };\n\n  if (close !== undefined) {\n    action = [/*#__PURE__*/_jsx(IconButton, {\n      className: classes.iconButton,\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      onClick: closeAlert,\n      children: /*#__PURE__*/_jsx(Close, {\n        className: classes.close\n      })\n    }, \"close\")];\n  }\n\n  var snackIcon = null;\n\n  switch (typeof icon) {\n    case \"object\":\n      snackIcon = /*#__PURE__*/_jsx(props.icon, {\n        className: classes.icon\n      });\n      break;\n\n    case \"string\":\n      snackIcon = /*#__PURE__*/_jsx(Icon, {\n        className: classes.icon,\n        children: props.icon\n      });\n      break;\n\n    default:\n      snackIcon = null;\n      break;\n  }\n\n  var _React$useState = React.useState( /*#__PURE__*/_jsx(Snack, {\n    message: /*#__PURE__*/_jsxs(\"div\", {\n      children: [snackIcon, message, close !== undefined ? action : null]\n    }),\n    classes: {\n      root: classes.root + \" \" + classes[color],\n      message: classes.message + \" \" + classes.container\n    }\n  })),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      alert = _React$useState2[0],\n      setAlert = _React$useState2[1];\n\n  return alert;\n}\nSnackbarContent.propTypes = {\n  message: PropTypes.node.isRequired,\n  color: PropTypes.oneOf([\"info\", \"success\", \"warning\", \"danger\", \"primary\"]),\n  close: PropTypes.bool,\n  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.string])\n};","map":null,"metadata":{},"sourceType":"module"}