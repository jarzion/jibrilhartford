{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\"; // nodejs library that concatenates classes\n\nimport classNames from \"classnames\"; // nodejs library to set properties for components\n\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Popper from \"@material-ui/core/Popper\"; // core components\n\nimport Button from \"components/CustomButtons/Button.js\";\nimport styles from \"styles/jss/nextjs-material-kit-pro/components/customDropdownStyle.js\";\nconst useStyles = makeStyles(styles);\nexport default function CustomDropdown(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    if (anchorEl && anchorEl.contains(event.target)) {\n      setAnchorEl(null);\n    } else {\n      setAnchorEl(event.currentTarget);\n    }\n  };\n\n  const handleClose = event => {\n    if (anchorEl.contains(event.target)) {\n      return;\n    }\n\n    setAnchorEl(null);\n  };\n\n  const handleCloseMenu = param => {\n    setAnchorEl(null);\n\n    if (props && props.onClick) {\n      props.onClick(param);\n    }\n  };\n\n  const {\n    buttonText,\n    buttonIcon,\n    dropdownList,\n    buttonProps,\n    dropup,\n    dropdownHeader,\n    caret,\n    hoverColor,\n    dropPlacement,\n    rtlActive,\n    noLiPadding,\n    innerDropDown,\n    navDropdown\n  } = props;\n  const classes = useStyles();\n  const caretClasses = classNames({\n    [classes.caret]: true,\n    [classes.caretDropup]: dropup && !anchorEl,\n    [classes.caretActive]: Boolean(anchorEl) && !dropup,\n    [classes.caretRTL]: rtlActive\n  });\n  const dropdownItem = classNames({\n    [classes.dropdownItem]: true,\n    [classes[hoverColor + \"Hover\"]]: true,\n    [classes.noLiPadding]: noLiPadding,\n    [classes.dropdownItemRTL]: rtlActive\n  });\n\n  const dropDownMenu = /*#__PURE__*/_jsxs(MenuList, {\n    role: \"menu\",\n    className: classes.menuList,\n    children: [dropdownHeader !== undefined ? /*#__PURE__*/_jsx(MenuItem, {\n      onClick: () => handleCloseMenu(dropdownHeader),\n      className: classes.dropdownHeader,\n      children: dropdownHeader\n    }) : null, dropdownList.map((prop, key) => {\n      if (prop.divider) {\n        return /*#__PURE__*/_jsx(Divider, {\n          onClick: () => handleCloseMenu(\"divider\"),\n          className: classes.dropdownDividerItem\n        }, key);\n      } else if (prop.props !== undefined && prop.props[\"data-ref\"] === \"multi\") {\n        return /*#__PURE__*/_jsx(MenuItem, {\n          className: dropdownItem,\n          style: {\n            overflow: \"visible\",\n            padding: 0\n          },\n          children: prop\n        }, key);\n      }\n\n      return /*#__PURE__*/_jsx(MenuItem, {\n        onClick: () => handleCloseMenu(prop),\n        className: dropdownItem,\n        children: prop\n      }, key);\n    })]\n  });\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: innerDropDown ? classes.innerManager : classes.manager,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: buttonText !== undefined ? \"\" : classes.target,\n      children: /*#__PURE__*/_jsxs(Button, _objectSpread(_objectSpread({\n        \"aria-label\": \"Notifications\",\n        \"aria-owns\": anchorEl ? \"menu-list\" : null,\n        \"aria-haspopup\": \"true\"\n      }, buttonProps), {}, {\n        onClick: handleClick,\n        children: [buttonIcon !== undefined ? /*#__PURE__*/_jsx(props.buttonIcon, {\n          className: classes.buttonIcon\n        }) : null, buttonText !== undefined ? buttonText : null, caret ? /*#__PURE__*/_jsx(\"b\", {\n          className: caretClasses\n        }) : null]\n      }))\n    }), /*#__PURE__*/_jsx(Popper, {\n      open: Boolean(anchorEl),\n      anchorEl: anchorEl,\n      transition: true,\n      disablePortal: true,\n      placement: dropPlacement,\n      className: classNames({\n        [classes.popperClose]: !anchorEl,\n        [classes.popperResponsive]: true,\n        [classes.popperNav]: Boolean(anchorEl) && navDropdown\n      }),\n      children: () => /*#__PURE__*/_jsx(Grow, {\n        in: Boolean(anchorEl),\n        id: \"menu-list\",\n        style: dropup ? {\n          transformOrigin: \"0 100% 0\"\n        } : {\n          transformOrigin: \"0 0 0\"\n        },\n        children: /*#__PURE__*/_jsx(Paper, {\n          className: classes.dropdown,\n          children: innerDropDown ? dropDownMenu : /*#__PURE__*/_jsx(ClickAwayListener, {\n            onClickAway: handleClose,\n            children: dropDownMenu\n          })\n        })\n      })\n    })]\n  });\n}\nCustomDropdown.defaultProps = {\n  caret: true,\n  dropup: false,\n  hoverColor: \"primary\"\n};","map":null,"metadata":{},"sourceType":"module"}