{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/Users/jimhartford/Code/jibrilhartford-github/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _slicedToArray from \"/Users/jimhartford/Code/jibrilhartford-github/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\"; // used for making the prop types of this component\n\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\"; // core components\n\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport styles from \"styles/jss/nextjs-material-kit-pro/components/customFileInputStyle.js\";\nvar useStyles = makeStyles(styles);\nexport default function CustomFileInput(props) {\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fileNames = _React$useState2[0],\n      setFileNames = _React$useState2[1]; // eslint-disable-next-line\n\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      files = _React$useState4[0],\n      setFiles = _React$useState4[1];\n\n  var hiddenFile = /*#__PURE__*/React.createRef();\n\n  var onFocus = function onFocus(e) {\n    hiddenFile.current.click(e);\n  }; // eslint-disable-next-line\n\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault(); // files is the file/image uploaded\n    // in this function you can save the image (files) on form submit\n    // you have to call it yourself\n  };\n\n  var addFile = function addFile(e) {\n    var fileNames = \"\";\n    var files = e.target.files;\n\n    for (var i = 0; i < e.target.files.length; i++) {\n      fileNames = fileNames + e.target.files[i].name;\n\n      if (props.multiple && i !== e.target.files.length - 1) {\n        fileNames = fileNames + \", \";\n      }\n    }\n\n    setFiles(files);\n    setFileNames(fileNames);\n  };\n\n  var id = props.id,\n      endButton = props.endButton,\n      startButton = props.startButton,\n      inputProps = props.inputProps,\n      formControlProps = props.formControlProps,\n      multiple = props.multiple;\n  var classes = useStyles();\n\n  if (inputProps && inputProps.type && inputProps.type === \"file\") {\n    inputProps.type = \"text\";\n  }\n\n  var buttonStart;\n  var buttonEnd;\n\n  if (startButton) {\n    buttonStart = /*#__PURE__*/_jsxs(Button, _objectSpread(_objectSpread({}, startButton.buttonProps), {}, {\n      children: [startButton.icon !== undefined ? startButton.icon : null, startButton.text !== undefined ? startButton.text : null]\n    }));\n  }\n\n  if (endButton) {\n    buttonEnd = /*#__PURE__*/_jsxs(Button, _objectSpread(_objectSpread({}, endButton.buttonProps), {}, {\n      children: [endButton.icon !== undefined ? endButton.icon : null, endButton.text !== undefined ? endButton.text : null]\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: classes.inputFileWrapper,\n    children: [/*#__PURE__*/_jsx(\"input\", {\n      type: \"file\",\n      className: classes.inputFile,\n      multiple: multiple,\n      ref: hiddenFile,\n      onChange: addFile\n    }), /*#__PURE__*/_jsx(CustomInput, {\n      id: id,\n      formControlProps: _objectSpread({}, formControlProps),\n      inputProps: _objectSpread(_objectSpread({}, inputProps), {}, {\n        onClick: onFocus,\n        value: fileNames,\n        endAdornment: buttonEnd,\n        startAdornment: buttonStart\n      })\n    })]\n  });\n}\nCustomFileInput.defaultProps = {\n  multiple: false\n};","map":null,"metadata":{},"sourceType":"module"}